diff --git a/libkopete/ui/kopetelistview.cpp b/libkopete/ui/kopetelistview.cpp
index 224fb50564c1a0144d90224ebe6afaf17505abc6..6e1029d5c99c734078bdee44f45662067ef2ef6d 100644
--- a/libkopete/ui/kopetelistview.cpp
+++ b/libkopete/ui/kopetelistview.cpp
@@ -34,6 +34,8 @@
 #include <QMouseEvent>
 #include <QTimer>
 #include <QToolTip>
+#include <QScrollBar>
+#include <QAbstractScrollArea>
 
 #include <kdebug.h>
 #include <kde_file.h>
@@ -78,7 +80,7 @@ public:
 	//! Auto scroll offset, the list will automatically start scrolling when the mouse gets this much pixel closer
 	//! to the upper or bottom edges of the listview.
 	int smoothAutoScrollOffset;
-	//! The last pressed control of one of the scrollbars 
+	//! The last pressed control of one of the scrollbars
 	//! (next page, previous line)
 	QStyle::SubControl pressedControl;
 	//! Counter we'll use when waiting.This amount of timeouts is required before beginning to emulate continuous
@@ -143,17 +145,17 @@ public:
 };
 
 ListView::ListView( QWidget *parent )
- : K3ListView( parent ), d( new Private )
+ : QTreeWidget( parent ), d( new Private )
 {
 	connect( &d->sortTimer, SIGNAL(timeout()), this, SLOT(slotSort()) );
 
 	// We have our own tooltips, don't use the default QListView ones
 	setShowToolTips( false );
 
-	connect( this, SIGNAL(contextMenu(K3ListView*,Q3ListViewItem*,QPoint)),
-	         SLOT(slotContextMenu(K3ListView*,Q3ListViewItem*,QPoint)) );
-	connect( this, SIGNAL(doubleClicked(Q3ListViewItem*)),
-	         SLOT(slotDoubleClicked(Q3ListViewItem*)) );
+	connect( this, SIGNAL(contextMenu(QTreeWidget*,QTreeWidgetItem*,QPoint)),
+	         SLOT(slotContextMenu(QTreeWidget*,QTreeWidgetItem*,QPoint)) );
+	connect( this, SIGNAL(doubleClicked(QTreeWidgetItem*)),
+	         SLOT(slotDoubleClicked(QTreeWidgetItem*)) );
 
 	// set up flags for nicer painting
 	setAttribute( Qt::WA_StaticContents, false );
@@ -181,16 +183,16 @@ ListView::~ListView()
 	delete d;
 }
 
-void ListView::slotDoubleClicked( Q3ListViewItem *item )
+void ListView::slotDoubleClicked( QTreeWidgetItem *item )
 {
 	kDebug( 14000 ) ;
 
 	if ( item )
-		setOpen( item, !isOpen( item ) );
+		item->setExpanded( !item->isExpanded() );
 }
 
-void ListView::slotContextMenu( K3ListView * /*listview*/,
-	Q3ListViewItem *item, const QPoint &/*point*/ )
+void ListView::slotContextMenu( QTreeWidget * /*listview*/,
+	QTreeWidgetItem *item, const QPoint &/*point*/ )
 {
 	if ( item && !item->isSelected() )
 	{
@@ -229,17 +231,17 @@ void ListView::setShowTreeLines( bool bShowAsTree )
  */
 void ListView::keyPressEvent( QKeyEvent *e )
 {
-	Q3ListViewItem *item = currentItem();
-	if ( (e->key() == Qt::Key_F2) && item && item->isVisible() )
+	QTreeWidgetItem *item = currentItem();
+	if ( (e->key() == Qt::Key_F2) && item && !( item->isHidden() ) )
 		rename( item, 0 );
-	else if ( (e->key() == Qt::Key_Enter || e->key() == Qt::Key_Return) && item && item->isVisible() )
+	else if ( (e->key() == Qt::Key_Enter || e->key() == Qt::Key_Return) && item && !( item->isHidden() ) )
 	{
 		// must provide a point within the item; emitExecute checks for this
-		QPoint p = viewport()->mapToGlobal(itemRect(item).center());
+		QPoint p = viewport()->mapToGlobal(visualItemRect(item).center());
 		emitExecute( currentItem(), p, 0 );
 	}
 	else
-		K3ListView::keyPressEvent(e);
+		QTreeWidget::keyPressEvent(e);
 }
 
 void ListView::delayedSort()
@@ -279,7 +281,7 @@ void ListView::setSmoothScrolling( bool b )
 		// Install the timer
 		d->smoothScrollingTimer = startTimer( (int)d->smoothScrollingTimerInterval );
 		// If we want to enable smooth scrolling when item has changed with keypresses etc, we need this
-		connect( this, SIGNAL(currentChanged(Q3ListViewItem*)), this, SLOT(slotCurrentChanged(Q3ListViewItem*)) );
+		connect( this, SIGNAL(currentChanged(QTreeWidgetItem*)), this, SLOT(slotCurrentChanged(QTreeWidgetItem*)) );
 		// Disable autoscroll, we will do it the smooth way.
 		d->smoothScrollDragAutoScroll = dragAutoScroll();
 		setDragAutoScroll( false );
@@ -298,7 +300,7 @@ void ListView::setSmoothScrolling( bool b )
 		killTimer( (int)d->smoothScrollingTimer );
 		d->smoothScrollingTimer = 0;
 		// We don't need to list currentChanged anymore
-		disconnect( this, SIGNAL(currentChanged(Q3ListViewItem*)), this, SLOT(slotCurrentChanged(Q3ListViewItem*)) );
+		disconnect( this, SIGNAL(currentChanged(QTreeWidgetItem*)), this, SLOT(slotCurrentChanged(QTreeWidgetItem*)) );
 		// Restore the autoscroll
 		setDragAutoScroll( d->smoothScrollDragAutoScroll );
 		// Kill the continuous press timers
@@ -334,7 +336,7 @@ void ListView::setScrollAutoHide( bool b )
 		// Set scrollbar auto-hiding state true
 		d->scrollAutoHide = true;
 		// Turn of the bar now
-		setVScrollBarMode( AlwaysOff );
+		setVerticalScrollBarPolicy( Qt::ScrollBarAlwaysOff );
 		// Start the timer to handle auto-hide
 		killTimer( d->scrollAutoHideTimer );
 		d->scrollAutoHideTimer = startTimer( 1000 );
@@ -342,7 +344,7 @@ void ListView::setScrollAutoHide( bool b )
 	else
 	{
 		d->scrollAutoHide = false;
-		setVScrollBarMode( Auto );
+		setVerticalScrollBarPolicy( Qt::ScrollBarAsNeeded );
 		killTimer( d->scrollAutoHideTimer );
 	}
 }
@@ -369,9 +371,9 @@ void ListView::setScrollHide( bool b )
 
 	d->scrollHide = b;
 	if( b )
-		setVScrollBarMode( AlwaysOff );
+		setVerticalScrollBarPolicy( Qt::ScrollBarAlwaysOff );
 	else
-		setVScrollBarMode( Auto );
+		setVerticalScrollBarPolicy( Qt::ScrollBarAsNeeded );
 }
 
 bool ListView::scrollHide() const
@@ -462,7 +464,7 @@ void ListView::timerEvent( QTimerEvent *e )
 	else if( e->timerId() == d->scrollAutoHideTimer )
 	{
 		if( !d->scrollAutoHideCounter-- )
-			setVScrollBarMode( AlwaysOff );
+			setVerticalScrollBarPolicy( Qt::ScrollBarAlwaysOff );
 	}
 }
 
@@ -528,7 +530,7 @@ bool ListView::eventFilter( QObject *o, QEvent *e )
 
 			// OK, now we can understand which partion of the scroll bar is clicked, and do the requested thing
 			// animated. Then set the step sizes to zero, and pass the event to the slider, so that user can
-			// feel like he/she really pressed the buttons (on click color change).		
+			// feel like he/she really pressed the buttons (on click color change).
 
 			switch( d->pressedControl )
 			{
@@ -652,7 +654,7 @@ bool ListView::eventFilter( QObject *o, QEvent *e )
 
 			if( d->scrollAutoHide ) // If auto-hide scroll bar is enabled
 			{
-				setVScrollBarMode( Auto );			// show the scroll bar
+				setVerticalScrollBarPolicy( Qt::ScrollBarAsNeeded );			// show the scroll bar
 				d->scrollAutoHideCounter = 9999;		// Mouse is on the contact list, so don't hide it
 			}
 
@@ -675,9 +677,9 @@ bool ListView::eventFilter( QObject *o, QEvent *e )
 			QHelpEvent *helpEvent = static_cast<QHelpEvent *>(e);
 			if( Item *item = dynamic_cast<Item*>( itemAt( helpEvent->pos() ) ) )
 			{
-				QRect itemRegion = this->itemRect( item );
+				QRect itemRegion = this->visualItemRect( item );
 
-				uint leftMargin = this->treeStepSize() * ( item->depth() + ( this->rootIsDecorated() ? 1 : 0 ) ) + itemMargin();
+				uint leftMargin = this->treeStepSize() * ( item->depth() + ( this->rootIsDecorated() ? 1 : 0 ) ) + autoScrollMargin();
 
 				uint xAdjust = itemRegion.left() + leftMargin;
 				uint yAdjust = itemRegion.top();
@@ -688,28 +690,29 @@ bool ListView::eventFilter( QObject *o, QEvent *e )
 					return false;
 
 				toolTip.second.translate( xAdjust, yAdjust );
-	
+
 				QToolTip::showText( helpEvent->globalPos(), toolTip.first );
 			}
 		}
 
-		return K3ListView::eventFilter( o, e ); // Pass the event to K3ListView
+		return QTreeWidget::eventFilter( o, e ); // Pass the event to QTreeWidget
 	}
 	else
 	{
 // 		kDebug( 14000 ) << "Unhandled event: [" << o << "][" << o->name() << "][" << o->metaObject()->className() << "][" << e->type() << "]";
-		return K3ListView::eventFilter( o, e ); // Pass the event to K3ListView
+		return QTreeWidget::eventFilter( o, e ); // Pass the event to QTreeWidget
 	}
 
 	return false;
 }
 
-void ListView::slotCurrentChanged( Q3ListViewItem *item )
+void ListView::slotCurrentChanged( QTreeWidgetItem *item )
 {
+	int itemHeight = item->treeWidget()->rowHeight(item->treeWidget()->indexFromItem(item));
 	if( !item ) return;
 	// If the current item changed due to mouse click then don't center it in the listview. Do this just for key presses.
 	if( d->mousePressed ){ d->mousePressed = false; return; }
-	d->targetScrollBarValue = itemPos(item) - static_cast<double>(visibleHeight()/2.0) + item->height();
+	d->targetScrollBarValue = itemPos(item) - static_cast<double>(visibleHeight()/2.0) + itemHeight;
 	// Make sure it's in the boundaries of scroll bar
 	d->targetScrollBarValue = qMax( d->targetScrollBarValue, ( double )verticalScrollBar()->minimum() );
 	d->targetScrollBarValue = qMin( d->targetScrollBarValue, ( double )verticalScrollBar()->maximum() );
diff --git a/libkopete/ui/kopetelistview.h b/libkopete/ui/kopetelistview.h
index 1c7bd139e5dec83fe514f93a6fe52a693231404b..6cf986494197d7db4bed9713419a57ef7380322b 100644
--- a/libkopete/ui/kopetelistview.h
+++ b/libkopete/ui/kopetelistview.h
@@ -19,7 +19,7 @@
 #ifndef KOPETE_LISTVIEW_H
 #define KOPETE_LISTVIEW_H
 
-#include <k3listview.h>
+#include <QTreeWidget>
 #include <kopete_export.h>
 
 class QKeyEvent;
@@ -34,7 +34,7 @@ namespace ListView {
  * @author Engin AYDOGAN <engin@bzzzt.biz>
  * @author Richard Smith <kde@metafoo.co.uk>
  */
-class KOPETE_EXPORT ListView : public K3ListView
+class KOPETE_EXPORT ListView : public QTreeWidget
 {
 	Q_OBJECT
 
@@ -132,7 +132,7 @@ public slots:
 	/**
 	 * Calls QListView::sort()
 	 */
-	void slotSort() { sort(); }
+	void slotSort() { sortItems(currentColumn(), Qt::AscendingOrder) ; }
 
 protected:
 	virtual void keyPressEvent( QKeyEvent *e );
@@ -152,8 +152,8 @@ signals:
 	void visibleSizeChanged ();
 
 private slots:
-	void slotContextMenu(K3ListView*,Q3ListViewItem *item, const QPoint &point );
-	void slotDoubleClicked( Q3ListViewItem *item );
+	void slotContextMenu(QTreeWidget*,QTreeWidgetItem *item, const QPoint &point );
+	void slotDoubleClicked( QTreeWidgetItem *item );
 	/**
 	 * To enable smooth scroll to focus on highlighted items when they are highlighted
 	 * by a key press we use this slot. slotCurrentChanged is connected to the currentChanged
@@ -161,7 +161,7 @@ private slots:
 	 * by the mouse, then we don't do anything, since the item is on the viewable area already.
 	 * Otherwise, we focus (bring it to the center of the list) smoothly.
 	 */
-	void slotCurrentChanged( Q3ListViewItem *item );
+	void slotCurrentChanged( QTreeWidgetItem *item );
 
 private:
 	class Private;
diff --git a/libkopete/ui/kopetelistviewitem.cpp b/libkopete/ui/kopetelistviewitem.cpp
index d39aeaf4a8a8a995cda0767990351999d3065c1c..4b29cd1c6ca14ad3346e9cec98e82c6cd617d6ed 100644
--- a/libkopete/ui/kopetelistviewitem.cpp
+++ b/libkopete/ui/kopetelistviewitem.cpp
@@ -30,7 +30,7 @@
 #include <qpainter.h>
 #include <qrect.h>
 #include <qtimer.h>
-#include <q3header.h>
+#include <QHeaderView>
 #include <qstyle.h>
 #include <qstyleoption.h>
 #include <QList>
@@ -955,14 +955,14 @@ bool Item::Private::animateChanges = true;
 bool Item::Private::fadeVisibility = true;
 bool Item::Private::foldVisibility = true;
 
-Item::Item( Q3ListViewItem *parent, QObject *owner )
- : QObject( owner ), K3ListViewItem( parent ), d( new Private(this) )
+Item::Item( QTreeWidgetItem *parent, QObject *owner )
+ : QObject( owner ), QTreeWidgetItem( parent ), d( new Private(this) )
 {
-	initLVI(parent->listView());
+	initLVI(parent->treeWidget());
 }
 
-Item::Item( Q3ListView *parent, QObject *owner )
- : QObject( owner ), K3ListViewItem( parent ), d( new Private(this) )
+Item::Item( QTreeWidget *parent, QObject *owner )
+ : QObject( owner ), QTreeWidgetItem( parent ), d( new Private(this) )
 {
 	initLVI(parent);
 }
@@ -981,7 +981,7 @@ void Item::setEffects( bool animation, bool fading, bool folding )
 
 void Item::initLVI(QObject* parent)
 {
-	connect( listView()->header(), SIGNAL(sizeChange(int,int,int)), SLOT(slotColumnResized()) );
+	connect( treeWidget()->header(), SIGNAL(sizeChange(int,int,int)), SLOT(slotColumnResized()) );
 	connect( &d->layoutTimer, SIGNAL(timeout()), SLOT(slotLayoutItems()) );
 	connect (this, SIGNAL (visibilityChanged(bool)), parent, SIGNAL (visibleSizeChanged()) );
 	//connect( &d->layoutAnimateTimer, SIGNAL(timeout()), SLOT(slotLayoutAnimateItems()) );
@@ -1149,7 +1149,7 @@ void Item::relayout()
 
 void Item::setup()
 {
-	K3ListViewItem::setup();
+	QTreeWidgetItem::setup();
 	slotLayoutItems();
 }
 
@@ -1166,10 +1166,10 @@ void Item::setHeight( int )
 		    vis = Private::visibilityFoldSteps;
 		minHeight = (minHeight * vis) / Private::visibilityFoldSteps;
 	}
-	K3ListViewItem::setHeight( minHeight );
+	QTreeWidgetItem::setHeight( minHeight );
 }
 
-int Item::width( const QFontMetrics &, const Q3ListView *lv, int c ) const
+int Item::width( const QFontMetrics &, const QTreeWidget *lv, int c ) const
 {
 	// Qt computes the itemRect from this. we want the whole item to be
 	// clickable, so we return the widest we could possibly be.
@@ -1181,7 +1181,7 @@ void Item::paintCell( QPainter *p, const QColorGroup &cg, int column, int width,
 	Q_UNUSED(align);
 	QPixmap back( width, height() );
 	QPainter paint( &back );
-	//K3ListViewItem::paintCell( &paint, cg, column, width, align );
+	//QTreeWidgetItem::paintCell( &paint, cg, column, width, align );
 	// PASTED FROM KLISTVIEWITEM:
 	// set the alternate cell background colour if necessary
 	QColorGroup _cg = cg;
@@ -1191,7 +1191,7 @@ void Item::paintCell( QPainter *p, const QColorGroup &cg, int column, int width,
 	{
 		QPainter *p = &paint;
 
-		Q3ListView *lv = listView();
+		QTreeWidget *lv = listView();
 		if ( !lv )
 			return;
 		QFontMetrics fm( p->fontMetrics() );
@@ -1201,7 +1201,7 @@ void Item::paintCell( QPainter *p, const QColorGroup &cg, int column, int width,
 
 		// removed text truncating code from Qt - we do that differently, further on
 
-		int marg = lv->itemMargin();
+		int marg = lv->autoScrollMargin();
 		QBrush b;
 		if (isSelected())
 			b = _cg.brush(QPalette::Normal, QPalette::Highlight);
@@ -1227,9 +1227,9 @@ void Item::paintCell( QPainter *p, const QColorGroup &cg, int column, int width,
 			if ( lv->isEnabled() )
 				how |= QStyle::State_Enabled;
 
-			lv->style()->drawComplexControl( QStyle::CC_Q3ListView,
+			lv->style()->drawComplexControl( QStyle::CC_QTreeWidget,
 						p, lv, QRect( 0, 0, width, height() ), lv->colorGroup(),
-						how, QStyle::SC_Q3ListView, QStyle::SC_None,
+						how, QStyle::SC_QTreeWidget, QStyle::SC_None,
 						opt );
 		}
 
@@ -1252,10 +1252,10 @@ void Item::paintCell( QPainter *p, const QColorGroup &cg, int column, int width,
 				textheight++;
 			if ( textheight < height() ) {
 				int w = lv->treeStepSize() / 2;
-				lv->style()->drawComplexControl( QStyle::CC_Q3ListView, p, lv,
+				lv->style()->drawComplexControl( QStyle::CC_QTreeWidget, p, lv,
 								QRect( 0, textheight, w + 1, height() - textheight + 1 ), _cg,
 								lv->isEnabled() ? QStyle::State_Enabled : QStyle::State_Default,
-								QStyle::SC_Q3ListViewExpand,
+								QStyle::SC_QTreeWidgetExpand,
 								(uint)QStyle::SC_All, QStyleOption( this ) );
 			}
         }
@@ -1314,7 +1314,7 @@ void Item::componentResized( Component *component )
 
 void Item::mySetVisible ( bool b )
 {
-	setVisible (b);
+	setHidden (!b);
 	emit visibilityChanged (b);
 }
 
diff --git a/libkopete/ui/kopetelistviewitem.h b/libkopete/ui/kopetelistviewitem.h
index dc7f907c5b650f03b4903296e3192dd239365890..1115f397ff3cb13de6e21dbd73208dd38c24921b 100644
--- a/libkopete/ui/kopetelistviewitem.h
+++ b/libkopete/ui/kopetelistviewitem.h
@@ -19,12 +19,13 @@
 #ifndef KOPETE_LISTVIEWITEM_H
 #define KOPETE_LISTVIEWITEM_H
 
-#include <k3listview.h>
 #include <kopetecontact.h>
 #include <kopete_export.h>
 
 #include <utility>
 
+#include <QTreeWidget>
+#include <QTreeWidgetItem>
 #include <QtGui/QPixmap>
 
 namespace Kopete {
@@ -393,12 +394,12 @@ public:
  *
  * @author Richard Smith <kde@metafoo.co.uk>
  */
-class KOPETE_EXPORT Item : public QObject, public K3ListViewItem, public ComponentBase
+class KOPETE_EXPORT Item : public QObject, public QTreeWidgetItem, public ComponentBase
 {
 	Q_OBJECT
 public:
-	explicit Item( Q3ListView *parent, QObject *owner = 0 );
-	explicit Item( Q3ListViewItem *parent, QObject *owner = 0 );
+	explicit Item( QTreeWidget *parent, QObject *owner = 0 );
+	explicit Item( QTreeWidgetItem *parent, QObject *owner = 0 );
 	~Item();
 
 	void repaint();
@@ -422,7 +423,7 @@ public:
 	 */
 	static void setEffects( bool animation, bool fading, bool folding );
 
-	int width( const QFontMetrics & fm, const Q3ListView * lv, int c ) const;
+	int width( const QFontMetrics & fm, const QTreeWidget * lv, int c ) const;
 
 	/**
 	 * Show or hide this item in a clean way depending on whether it matches
@@ -437,7 +438,7 @@ protected:
 	void componentResized( Component *component );
 
 	void setHeight( int );
-	
+
 signals:
 	void visibilityChanged (bool visibility);
 
diff --git a/libkopete/ui/kopetelistviewsearchline.cpp b/libkopete/ui/kopetelistviewsearchline.cpp
index 43bc4025e767c432b8d4b538903e19ce282de943..a225d96de12e479022c98211e2afc4f1454f480b 100644
--- a/libkopete/ui/kopetelistviewsearchline.cpp
+++ b/libkopete/ui/kopetelistviewsearchline.cpp
@@ -25,7 +25,7 @@ namespace UI {
 namespace ListView {
 
 SearchLine::SearchLine( QWidget *parent, ListView *listView )
-	: K3ListViewSearchLine( parent, listView ), searchEmpty(true)
+	: KTreeWidgetSearchLine( parent, listView ), searchEmpty(true)
 {
 }
 
@@ -39,40 +39,40 @@ void SearchLine::updateSearch( const QString &s )
 	// we copy a huge chunk of code here simply in order to override
 	// the way items are shown/hidden. KSearchLine rudely
 	// calls setVisible() on items with no way to customize this behaviour.
-	
+
 	//BEGIN code from KSearchLine::updateSearch
-		if( !listView() )
+		if( !treeWidget() )
 		return;
-	
+
 	search = s.isNull() ? text() : s;
 	searchEmpty = search.isEmpty();
 
 	// If there's a selected item that is visible, make sure that it's visible
 	// when the search changes too (assuming that it still matches).
-	
-	Q3ListViewItem *currentItem = 0;
-	
+
+	QTreeWidgetItem *currentItem = 0;
+
 	switch( listView()->selectionMode() )
 	{
-	case K3ListView::NoSelection:
+	case QAbstractItemView::NoSelection:
 		break;
-	case K3ListView::Single:
-		currentItem = listView()->selectedItem();
+	case QAbstractItemView::SingleSelection:
+		currentItem = listView()->currentItem();
 		break;
 	default:
-		for( Q3ListViewItemIterator it(listView(), Q3ListViewItemIterator::Selected | Q3ListViewItemIterator::Visible);
-		     it.current() && !currentItem; ++it )
+		for( QTreeWidgetItemIterator it(listView(), QTreeWidgetItemIterator::Selected | QTreeWidgetItemIterator::NotHidden);
+			(*it) && !currentItem; ++it )
 		{
-			if( listView()->itemRect( it.current() ).isValid() )
-				currentItem = it.current();
+			if( listView()->itemRect( (*it) ).isValid() )
+				currentItem = (*it);
 		}
 	}
-	
+
 	if( keepParentsVisible() )
 		checkItemParentsVisible( listView()->firstChild() );
 	else
 		checkItemParentsNotVisible();
-	
+
 	if( currentItem )
 		listView()->ensureItemVisible( currentItem );
 	//END code from KSearchLine::updateSearch
@@ -81,27 +81,28 @@ void SearchLine::updateSearch( const QString &s )
 void SearchLine::checkItemParentsNotVisible()
 {
 	//BEGIN code from KSearchLine::checkItemParentsNotVisible
-	Q3ListViewItemIterator it( listView() );
-	for( ; it.current(); ++it )
+	QTreeWidgetItemIterator it( listView() );
+	for( ; (*it); ++it )
 	{
-		Q3ListViewItem *item = it.current();
+		QTreeWidgetItem *item = (*it);
 		if( itemMatches( item, search ) )
-			setItemVisible( item, true );
+			item->setHidden( false );
 		else
-			setItemVisible( item, false );
+			item->setHidden( true );
 	}
 	//END code from KSearchLine::checkItemParentsNotVisible
 }
 
-bool SearchLine::checkItemParentsVisible( Q3ListViewItem *item )
+bool SearchLine::checkItemParentsVisible( QTreeWidgetItem *item )
 {
 	//BEGIN code from KSearchLine::checkItemParentsVisible
 	bool visible = false;
-	for( ; item; item = item->nextSibling() ) {
-		if( ( item->firstChild() && checkItemParentsVisible( item->firstChild() ) ) ||
+	QTreeWidgetItemIterator it(item);
+	for( ; (*it); ++it ) {
+		if( ( (*it)->child(0) && checkItemParentsVisible( (*it)->child(0) ) ) ||
 		    itemMatches( item, search ) )
 		{
-			setItemVisible( item, true );
+			(*it)->setHidden( true );
 			// OUCH! this operation just became exponential-time.
 			// however, setting an item visible sets all its descendents
 			// visible too, which we definitely don't want.
@@ -109,22 +110,22 @@ bool SearchLine::checkItemParentsVisible( Q3ListViewItem *item )
 			// so this really just doubles the runtime, if that.
 			// this still can be done in O(n) time by a mark-set process,
 			// but that's overkill in our case.
-			checkItemParentsVisible( item->firstChild() );
+			checkItemParentsVisible( (*it)->child(0) );
 			visible = true;
 		}
 		else
-			setItemVisible( item, false );
+			(*it)->setHidden( true );
 	}
 	return visible;
 	//END code from KSearchLine::checkItemParentsVisible
 }
 
-void SearchLine::setItemVisible( Q3ListViewItem *it, bool b )
+void SearchLine::setItemVisible( QTreeWidgetItem *it, bool b )
 {
 	if( Item *item = dynamic_cast<Item*>( it ) )
 		item->setSearchMatch( b, !searchEmpty );
 	else
-		it->setVisible( b );
+		it->setHidden( !b );
 }
 
 } // namespace ListView
diff --git a/libkopete/ui/kopetelistviewsearchline.h b/libkopete/ui/kopetelistviewsearchline.h
index 13a7e9d785ba1a14fd21ec0cc3a790fb3be16858..8ece4204577ac75abaaeb96a943c32077512a578 100644
--- a/libkopete/ui/kopetelistviewsearchline.h
+++ b/libkopete/ui/kopetelistviewsearchline.h
@@ -18,7 +18,7 @@
 #ifndef KOPETELISTVIEWSEARCHLINE_H
 #define KOPETELISTVIEWSEARCHLINE_H
 
-#include <k3listviewsearchline.h>
+#include <ktreewidgetsearchline.h>
 #include <kopete_export.h>
 
 namespace Kopete {
@@ -27,7 +27,7 @@ namespace ListView {
 
 class ListView;
 
-class KOPETE_EXPORT SearchLine : public K3ListViewSearchLine
+class KOPETE_EXPORT SearchLine : public KTreeWidgetSearchLine
 {
 	Q_OBJECT
 public:
@@ -43,14 +43,14 @@ public:
 	 * Destroys the SearchLine.
 	 */
 	~SearchLine();
-	
+
 	void updateSearch( const QString &s );
-	
+
 protected:
 	virtual void checkItemParentsNotVisible();
-	virtual bool checkItemParentsVisible( Q3ListViewItem *it );
-	virtual void setItemVisible( Q3ListViewItem *it, bool visible );
-	
+	virtual bool checkItemParentsVisible( QTreeWidgetItem *it );
+	virtual void setItemVisible( QTreeWidgetItem *it, bool visible );
+
 private:
 	QString search;
 	bool searchEmpty;
diff --git a/libkopete/ui/metacontactselectorwidget.cpp b/libkopete/ui/metacontactselectorwidget.cpp
index 96f9eb17b850db0a5925d94e9da531a6190da61b..7218aefa7dd6acc19bbbd85df97c5f08e9a37105 100644
--- a/libkopete/ui/metacontactselectorwidget.cpp
+++ b/libkopete/ui/metacontactselectorwidget.cpp
@@ -26,6 +26,8 @@
 #include <qlayout.h>
 #include <QVBoxLayout>
 #include <QBoxLayout>
+#include <QTreeWidget>
+#include <QTreeWidgetItem>
 
 #include <kconfig.h>
 #include <klocale.h>
@@ -35,8 +37,7 @@
 #include <kinputdialog.h>
 #include <kpushbutton.h>
 #include <kdebug.h>
-#include <k3listview.h>
-#include <k3listviewsearchline.h>
+#include <ktreewidgetsearchline.h>
 
 #include "kopetelistview.h"
 #include "kopetelistviewsearchline.h"
@@ -68,7 +69,7 @@ public:
 };
 
 
-MetaContactSelectorWidgetLVI::MetaContactSelectorWidgetLVI(Kopete::MetaContact *mc, Q3ListView *parent, QObject *owner) : Kopete::UI::ListView::Item(parent, owner) , d( new Private() )
+MetaContactSelectorWidgetLVI::MetaContactSelectorWidgetLVI(Kopete::MetaContact *mc, QTreeWidget *parent, QObject *owner) : Kopete::UI::ListView::Item(parent, owner) , d( new Private() )
 {
 	d->metaContact = mc;
 	d->photoSize = 60;
@@ -97,10 +98,10 @@ void MetaContactSelectorWidgetLVI::slotDisplayNameChanged()
 		d->nameText->setText( d->metaContact->displayName() );
 
 		// delay the sort if we can
-		if ( ListView::ListView *lv = dynamic_cast<ListView::ListView *>( listView() ) )
+		if ( ListView::ListView *lv = dynamic_cast<ListView::ListView *>( d->treeWidget() ) )
 			lv->delayedSort();
 		else
-			listView()->sort();
+			d->treeWidget()->sortChildren();
 	}
 }
 
@@ -195,26 +196,27 @@ MetaContactSelectorWidget::MetaContactSelectorWidget( QWidget *parent, const cha
 
 	d->widget = new Ui::MetaContactSelectorWidget_Base;
 
+	QStringList args = (QStringList() << i18n("Contacts"));
 	QBoxLayout *l = new QVBoxLayout(this);
 	QWidget *w = new QWidget(this);
 	d->widget->setupUi(w);
 	l->addWidget(w);
 
-	connect( d->widget->metaContactListView, SIGNAL(clicked(Q3ListViewItem*)),
-			SIGNAL(metaContactListClicked(Q3ListViewItem*)) );
-	connect( d->widget->metaContactListView, SIGNAL(selectionChanged(Q3ListViewItem*)),
-			SIGNAL(metaContactListClicked(Q3ListViewItem*)) );
-	connect( d->widget->metaContactListView, SIGNAL(spacePressed(Q3ListViewItem*)),
-			SIGNAL(metaContactListClicked(Q3ListViewItem*)) );
+	connect( d->widget->metaContactListView, SIGNAL(clicked(QTreeWidgetItem*)),
+			SIGNAL(metaContactListClicked(QTreeWidgetItem*)) );
+	connect( d->widget->metaContactListView, SIGNAL(selectionChanged(QTreeWidgetItem*)),
+			SIGNAL(metaContactListClicked(QTreeWidgetItem*)) );
+	connect( d->widget->metaContactListView, SIGNAL(spacePressed(QTreeWidgetItem*)),
+			SIGNAL(metaContactListClicked(QTreeWidgetItem*)) );
 
 	connect( Kopete::ContactList::self(), SIGNAL(metaContactAdded(Kopete::MetaContact*)), this, SLOT(slotLoadMetaContacts()) );
 
-	d->widget->kListViewSearchLine->setListView(d->widget->metaContactListView);
+	d->widget->kListViewSearchLine->setTreeWidget(d->widget->metaContactListView);
 	d->widget->kListViewSearchLine->setFocus();
-	d->widget->metaContactListView->setFullWidth( true );
-	d->widget->metaContactListView->addColumn( i18n( "Contacts" ), 0 );
+	d->widget->metaContactListView->header()->setResizeMode( QHeaderView::ResizeToContents );
+	d->widget->metaContactListView->setHeaderLabels(args);
 	d->widget->metaContactListView->header()->hide();
-	d->widget->metaContactListView->setColumnWidthMode(0, Q3ListView::Maximum);
+	d->widget->metaContactListView->header()->setResizeMode(QHeaderView::Stretch);
 	slotLoadMetaContacts();
 }
 
@@ -230,7 +232,7 @@ MetaContactSelectorWidget::~MetaContactSelectorWidget()
 Kopete::MetaContact* MetaContactSelectorWidget::metaContact()
 {
 	MetaContactSelectorWidgetLVI *item = 0L;
-	item = static_cast<MetaContactSelectorWidgetLVI *>( d->widget->metaContactListView->selectedItem() );
+	item = static_cast<MetaContactSelectorWidgetLVI *>( d->widget->metaContactListView->currentItem() );
 
 	if ( item )
 		return item->metaContact();
@@ -241,18 +243,18 @@ Kopete::MetaContact* MetaContactSelectorWidget::metaContact()
 void MetaContactSelectorWidget::selectMetaContact( Kopete::MetaContact *mc )
 {
 	// iterate trough list view
-	Q3ListViewItemIterator it( d->widget->metaContactListView );
-	while( it.current() )
+	QTreeWidgetItemIterator it( d->widget->metaContactListView );
+	while( (*it ) )
 	{
-		MetaContactSelectorWidgetLVI *item = (MetaContactSelectorWidgetLVI *) it.current();
+		MetaContactSelectorWidgetLVI *item = (MetaContactSelectorWidgetLVI *) (*it);
 		if (!item)
 			continue;
 
 		if ( mc == item->metaContact() )
 		{
 			// select the contact item
-			d->widget->metaContactListView->setSelected( item, true );
-			d->widget->metaContactListView->ensureItemVisible( item );
+			item->setSelected( true );
+			item->setDisabled( false );
 		}
 		++it;
 	}
@@ -269,7 +271,7 @@ void MetaContactSelectorWidget::excludeMetaContact( Kopete::MetaContact *mc )
 
 bool MetaContactSelectorWidget::metaContactSelected()
 {
-	return d->widget->metaContactListView->selectedItem() ? true : false;
+	return d->widget->metaContactListView->currentItem() ? true : false;
 }
 
 /**  Read in metacontacts from contact list */
@@ -289,7 +291,7 @@ void MetaContactSelectorWidget::slotLoadMetaContacts()
 		}
 	}
 
-	d->widget->metaContactListView->sort();
+	d->widget->metaContactListView->sortItems(d->widget->metaContactListView->currentColumn(), Qt::AscendingOrder);
 }
 
 void MetaContactSelectorWidget::setLabelMessage( const QString &msg )
diff --git a/libkopete/ui/metacontactselectorwidget.h b/libkopete/ui/metacontactselectorwidget.h
index 1086eaeb232605a5879709f2889ae0e1d746b3b0..38b115487d0003bc588fb1469ea3643014f4c2bf 100644
--- a/libkopete/ui/metacontactselectorwidget.h
+++ b/libkopete/ui/metacontactselectorwidget.h
@@ -67,7 +67,7 @@ protected slots:
 	 */
 	void slotLoadMetaContacts();
 signals:
-	void metaContactListClicked( Q3ListViewItem *mc );
+	void metaContactListClicked( QTreeWidgetItem *mc );
 private:
 	class Private;
 	Private * const d;
@@ -81,7 +81,7 @@ class MetaContactSelectorWidgetLVI : public Kopete::UI::ListView::Item
 {
 	Q_OBJECT
 public:
-	MetaContactSelectorWidgetLVI(Kopete::MetaContact *mc, Q3ListView *parent, QObject *owner = 0 );
+	MetaContactSelectorWidgetLVI(Kopete::MetaContact *mc, QTreeWidget *parent, QObject *owner = 0 );
 	virtual ~MetaContactSelectorWidgetLVI();
 	Kopete::MetaContact* metaContact();
 	virtual QString text ( int column ) const;
